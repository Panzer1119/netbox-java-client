/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import com.google.gson.reflect.TypeToken;
import de.codemakers.netbox.client.*;
import de.codemakers.netbox.client.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CircuitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;
    
    public CircuitsApi() {
        this(Configuration.getDefaultApiClient());
    }
    
    public CircuitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public ApiClient getApiClient() {
        return localVarApiClient;
    }
    
    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }
    
    public int getHostIndex() {
        return localHostIndex;
    }
    
    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }
    
    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }
    
    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitTerminationsBulkDelete() throws ApiException {
        circuitsCircuitTerminationsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitTerminationsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkPartialUpdateCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsBulkPartialUpdateValidateBeforeCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTerminationsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsBulkPartialUpdate(WritableCircuitTermination data) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsBulkPartialUpdateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkPartialUpdateAsync(WritableCircuitTermination data, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkUpdateCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsBulkUpdateValidateBeforeCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTerminationsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsBulkUpdate(WritableCircuitTermination data) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsBulkUpdateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsBulkUpdateAsync(WritableCircuitTermination data, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsCreateCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsCreateValidateBeforeCall(WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTerminationsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsCreate(WritableCircuitTermination data) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsCreateWithHttpInfo(WritableCircuitTermination data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsCreateAsync(WritableCircuitTermination data, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsDelete
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitTerminationsDelete(Integer id) throws ApiException {
        circuitsCircuitTerminationsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitTerminationsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsList
     *
     * @param id (optional)
     * @param termSide (optional)
     * @param portSpeed (optional)
     * @param upstreamSpeed (optional)
     * @param xconnectId (optional)
     * @param description (optional)
     * @param cableEnd (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param cabled (optional)
     * @param circuitId (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param providerNetworkId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param termSideN (optional)
     * @param portSpeedN (optional)
     * @param portSpeedLte (optional)
     * @param portSpeedLt (optional)
     * @param portSpeedGte (optional)
     * @param portSpeedGt (optional)
     * @param upstreamSpeedN (optional)
     * @param upstreamSpeedLte (optional)
     * @param upstreamSpeedLt (optional)
     * @param upstreamSpeedGte (optional)
     * @param upstreamSpeedGt (optional)
     * @param xconnectIdN (optional)
     * @param xconnectIdIc (optional)
     * @param xconnectIdNic (optional)
     * @param xconnectIdIew (optional)
     * @param xconnectIdNiew (optional)
     * @param xconnectIdIsw (optional)
     * @param xconnectIdNisw (optional)
     * @param xconnectIdIe (optional)
     * @param xconnectIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param cableEndN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param circuitIdN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param providerNetworkIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsListCall(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (termSide != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_side", termSide));
        }
        
        if (portSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed", portSpeed));
        }
        
        if (upstreamSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed", upstreamSpeed));
        }
        
        if (xconnectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id", xconnectId));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (cableEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end", cableEnd));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (cabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cabled", cabled));
        }
        
        if (circuitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circuit_id", circuitId));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (providerNetworkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_network_id", providerNetworkId));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (termSideN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term_side__n", termSideN));
        }
        
        if (portSpeedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__n", portSpeedN));
        }
        
        if (portSpeedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__lte", portSpeedLte));
        }
        
        if (portSpeedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__lt", portSpeedLt));
        }
        
        if (portSpeedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__gte", portSpeedGte));
        }
        
        if (portSpeedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port_speed__gt", portSpeedGt));
        }
        
        if (upstreamSpeedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__n", upstreamSpeedN));
        }
        
        if (upstreamSpeedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__lte", upstreamSpeedLte));
        }
        
        if (upstreamSpeedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__lt", upstreamSpeedLt));
        }
        
        if (upstreamSpeedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__gte", upstreamSpeedGte));
        }
        
        if (upstreamSpeedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upstream_speed__gt", upstreamSpeedGt));
        }
        
        if (xconnectIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__n", xconnectIdN));
        }
        
        if (xconnectIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__ic", xconnectIdIc));
        }
        
        if (xconnectIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nic", xconnectIdNic));
        }
        
        if (xconnectIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__iew", xconnectIdIew));
        }
        
        if (xconnectIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__niew", xconnectIdNiew));
        }
        
        if (xconnectIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__isw", xconnectIdIsw));
        }
        
        if (xconnectIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nisw", xconnectIdNisw));
        }
        
        if (xconnectIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__ie", xconnectIdIe));
        }
        
        if (xconnectIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("xconnect_id__nie", xconnectIdNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (cableEndN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cable_end__n", cableEndN));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (circuitIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("circuit_id__n", circuitIdN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (providerNetworkIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_network_id__n", providerNetworkIdN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsListValidateBeforeCall(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsListCall(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param termSide (optional)
     * @param portSpeed (optional)
     * @param upstreamSpeed (optional)
     * @param xconnectId (optional)
     * @param description (optional)
     * @param cableEnd (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param cabled (optional)
     * @param circuitId (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param providerNetworkId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param termSideN (optional)
     * @param portSpeedN (optional)
     * @param portSpeedLte (optional)
     * @param portSpeedLt (optional)
     * @param portSpeedGte (optional)
     * @param portSpeedGt (optional)
     * @param upstreamSpeedN (optional)
     * @param upstreamSpeedLte (optional)
     * @param upstreamSpeedLt (optional)
     * @param upstreamSpeedGte (optional)
     * @param upstreamSpeedGt (optional)
     * @param xconnectIdN (optional)
     * @param xconnectIdIc (optional)
     * @param xconnectIdNic (optional)
     * @param xconnectIdIew (optional)
     * @param xconnectIdNiew (optional)
     * @param xconnectIdIsw (optional)
     * @param xconnectIdNisw (optional)
     * @param xconnectIdIe (optional)
     * @param xconnectIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param cableEndN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param circuitIdN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param providerNetworkIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return CircuitsCircuitTerminationsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitsCircuitTerminationsList200Response circuitsCircuitTerminationsList(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitTerminationsList200Response> localVarResp = circuitsCircuitTerminationsListWithHttpInfo(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param termSide (optional)
     * @param portSpeed (optional)
     * @param upstreamSpeed (optional)
     * @param xconnectId (optional)
     * @param description (optional)
     * @param cableEnd (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param cabled (optional)
     * @param circuitId (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param providerNetworkId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param termSideN (optional)
     * @param portSpeedN (optional)
     * @param portSpeedLte (optional)
     * @param portSpeedLt (optional)
     * @param portSpeedGte (optional)
     * @param portSpeedGt (optional)
     * @param upstreamSpeedN (optional)
     * @param upstreamSpeedLte (optional)
     * @param upstreamSpeedLt (optional)
     * @param upstreamSpeedGte (optional)
     * @param upstreamSpeedGt (optional)
     * @param xconnectIdN (optional)
     * @param xconnectIdIc (optional)
     * @param xconnectIdNic (optional)
     * @param xconnectIdIew (optional)
     * @param xconnectIdNiew (optional)
     * @param xconnectIdIsw (optional)
     * @param xconnectIdNisw (optional)
     * @param xconnectIdIe (optional)
     * @param xconnectIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param cableEndN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param circuitIdN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param providerNetworkIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;CircuitsCircuitTerminationsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitsCircuitTerminationsList200Response> circuitsCircuitTerminationsListWithHttpInfo(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsListValidateBeforeCall(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTerminationsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param termSide (optional)
     * @param portSpeed (optional)
     * @param upstreamSpeed (optional)
     * @param xconnectId (optional)
     * @param description (optional)
     * @param cableEnd (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param cabled (optional)
     * @param circuitId (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param providerNetworkId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param termSideN (optional)
     * @param portSpeedN (optional)
     * @param portSpeedLte (optional)
     * @param portSpeedLt (optional)
     * @param portSpeedGte (optional)
     * @param portSpeedGt (optional)
     * @param upstreamSpeedN (optional)
     * @param upstreamSpeedLte (optional)
     * @param upstreamSpeedLt (optional)
     * @param upstreamSpeedGte (optional)
     * @param upstreamSpeedGt (optional)
     * @param xconnectIdN (optional)
     * @param xconnectIdIc (optional)
     * @param xconnectIdNic (optional)
     * @param xconnectIdIew (optional)
     * @param xconnectIdNiew (optional)
     * @param xconnectIdIsw (optional)
     * @param xconnectIdNisw (optional)
     * @param xconnectIdIe (optional)
     * @param xconnectIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param cableEndN (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param circuitIdN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param providerNetworkIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsListAsync(String id, String termSide, String portSpeed, String upstreamSpeed, String xconnectId, String description, String cableEnd, String created, String lastUpdated, String q, String tag, String cabled, String circuitId, String siteId, String site, String providerNetworkId, String idN, String idLte, String idLt, String idGte, String idGt, String termSideN, String portSpeedN, String portSpeedLte, String portSpeedLt, String portSpeedGte, String portSpeedGt, String upstreamSpeedN, String upstreamSpeedLte, String upstreamSpeedLt, String upstreamSpeedGte, String upstreamSpeedGt, String xconnectIdN, String xconnectIdIc, String xconnectIdNic, String xconnectIdIew, String xconnectIdNiew, String xconnectIdIsw, String xconnectIdNisw, String xconnectIdIe, String xconnectIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String cableEndN, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String circuitIdN, String siteIdN, String siteN, String providerNetworkIdN, String ordering, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitTerminationsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsListValidateBeforeCall(id, termSide, portSpeed, upstreamSpeed, xconnectId, description, cableEnd, created, lastUpdated, q, tag, cabled, circuitId, siteId, site, providerNetworkId, idN, idLte, idLt, idGte, idGt, termSideN, portSpeedN, portSpeedLte, portSpeedLt, portSpeedGte, portSpeedGt, upstreamSpeedN, upstreamSpeedLte, upstreamSpeedLt, upstreamSpeedGte, upstreamSpeedGt, xconnectIdN, xconnectIdIc, xconnectIdNic, xconnectIdIew, xconnectIdNiew, xconnectIdIsw, xconnectIdNisw, xconnectIdIe, xconnectIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, cableEndN, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, circuitIdN, siteIdN, siteN, providerNetworkIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTerminationsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsPartialUpdate
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPartialUpdateCall(Integer id, WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(Integer id, WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTerminationsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsPartialUpdate(Integer id, WritableCircuitTermination data) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsPartialUpdateWithHttpInfo(Integer id, WritableCircuitTermination data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPartialUpdateAsync(Integer id, WritableCircuitTermination data, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsPaths
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPathsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/paths/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsPathsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsPaths(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPathsCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * Return all CablePaths which traverse a given pass-through port.
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsPaths(Integer id) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsPathsWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * Return all CablePaths which traverse a given pass-through port.
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsPathsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPathsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Return all CablePaths which traverse a given pass-through port.
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsPathsAsync(Integer id, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsPathsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsRead
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsRead(Integer id) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsReadAsync(Integer id, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTerminationsUpdate
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsUpdateCall(Integer id, WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-terminations/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTerminationsUpdateValidateBeforeCall(Integer id, WritableCircuitTermination data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTerminationsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTerminationsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     *
     * @return CircuitTermination
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitTermination circuitsCircuitTerminationsUpdate(Integer id, WritableCircuitTermination data) throws ApiException {
        ApiResponse<CircuitTermination> localVarResp = circuitsCircuitTerminationsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitTermination&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitTermination> circuitsCircuitTerminationsUpdateWithHttpInfo(Integer id, WritableCircuitTermination data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTerminationsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit termination. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTerminationsUpdateAsync(Integer id, WritableCircuitTermination data, final ApiCallback<CircuitTermination> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTerminationsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CircuitTermination>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitTypesBulkDelete() throws ApiException {
        circuitsCircuitTypesBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitTypesBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkPartialUpdateCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesBulkPartialUpdateValidateBeforeCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTypesBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesBulkPartialUpdate(CircuitType data) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesBulkPartialUpdateWithHttpInfo(CircuitType data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkPartialUpdateAsync(CircuitType data, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkUpdateCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesBulkUpdateValidateBeforeCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTypesBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesBulkUpdate(CircuitType data) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesBulkUpdateWithHttpInfo(CircuitType data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesBulkUpdateAsync(CircuitType data, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesCreateCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesCreateValidateBeforeCall(CircuitType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTypesCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesCreate(CircuitType data) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesCreateWithHttpInfo(CircuitType data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesCreateAsync(CircuitType data, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesDelete
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitTypesDelete(Integer id) throws ApiException {
        circuitsCircuitTypesDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitTypesDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesListCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesListValidateBeforeCall(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesListCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return CircuitsCircuitTypesList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitsCircuitTypesList200Response circuitsCircuitTypesList(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitTypesList200Response> localVarResp = circuitsCircuitTypesListWithHttpInfo(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;CircuitsCircuitTypesList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitsCircuitTypesList200Response> circuitsCircuitTypesListWithHttpInfo(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTypesList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesListAsync(String id, String name, String slug, String description, String created, String lastUpdated, String q, String tag, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String ordering, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitTypesList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesListValidateBeforeCall(id, name, slug, description, created, lastUpdated, q, tag, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitTypesList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesPartialUpdate
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesPartialUpdateCall(Integer id, CircuitType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesPartialUpdateValidateBeforeCall(Integer id, CircuitType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTypesPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesPartialUpdate(Integer id, CircuitType data) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesPartialUpdateWithHttpInfo(Integer id, CircuitType data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesPartialUpdateAsync(Integer id, CircuitType data, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesRead
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesRead(Integer id) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesReadAsync(Integer id, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitTypesUpdate
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesUpdateCall(Integer id, CircuitType data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuit-types/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitTypesUpdateValidateBeforeCall(Integer id, CircuitType data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitTypesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitTypesUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitTypesUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     *
     * @return CircuitType
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitType circuitsCircuitTypesUpdate(Integer id, CircuitType data) throws ApiException {
        ApiResponse<CircuitType> localVarResp = circuitsCircuitTypesUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;CircuitType&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitType> circuitsCircuitTypesUpdateWithHttpInfo(Integer id, CircuitType data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitTypesUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit type. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitTypesUpdateAsync(Integer id, CircuitType data, final ApiCallback<CircuitType> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitTypesUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<CircuitType>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitsBulkDelete() throws ApiException {
        circuitsCircuitsBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitsBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkPartialUpdateCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsBulkPartialUpdateValidateBeforeCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitsBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsBulkPartialUpdate(WritableCircuit data) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsBulkPartialUpdateWithHttpInfo(WritableCircuit data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkPartialUpdateAsync(WritableCircuit data, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkUpdateCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsBulkUpdateValidateBeforeCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitsBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsBulkUpdate(WritableCircuit data) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsBulkUpdateWithHttpInfo(WritableCircuit data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsBulkUpdateAsync(WritableCircuit data, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsCreateCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsCreateValidateBeforeCall(WritableCircuit data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitsCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsCreate(WritableCircuit data) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsCreateWithHttpInfo(WritableCircuit data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsCreateAsync(WritableCircuit data, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsDelete
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsCircuitsDelete(Integer id) throws ApiException {
        circuitsCircuitsDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsCircuitsDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsList
     *
     * @param id (optional)
     * @param cid (optional)
     * @param description (optional)
     * @param installDate (optional)
     * @param terminationDate (optional)
     * @param commitRate (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param providerNetworkId (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param cidN (optional)
     * @param cidIc (optional)
     * @param cidNic (optional)
     * @param cidIew (optional)
     * @param cidNiew (optional)
     * @param cidIsw (optional)
     * @param cidNisw (optional)
     * @param cidIe (optional)
     * @param cidNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param installDateN (optional)
     * @param installDateLte (optional)
     * @param installDateLt (optional)
     * @param installDateGte (optional)
     * @param installDateGt (optional)
     * @param terminationDateN (optional)
     * @param terminationDateLte (optional)
     * @param terminationDateLt (optional)
     * @param terminationDateGte (optional)
     * @param terminationDateGt (optional)
     * @param commitRateN (optional)
     * @param commitRateLte (optional)
     * @param commitRateLt (optional)
     * @param commitRateGte (optional)
     * @param commitRateGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param providerNetworkIdN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsListCall(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (cid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid", cid));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (installDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date", installDate));
        }
        
        if (terminationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date", terminationDate));
        }
        
        if (commitRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate", commitRate));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (tenantGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id", tenantGroupId));
        }
        
        if (tenantGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group", tenantGroup));
        }
        
        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }
        
        if (tenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant", tenant));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id", providerId));
        }
        
        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }
        
        if (providerNetworkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_network_id", providerNetworkId));
        }
        
        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id", typeId));
        }
        
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }
        
        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (cidN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__n", cidN));
        }
        
        if (cidIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__ic", cidIc));
        }
        
        if (cidNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nic", cidNic));
        }
        
        if (cidIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__iew", cidIew));
        }
        
        if (cidNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__niew", cidNiew));
        }
        
        if (cidIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__isw", cidIsw));
        }
        
        if (cidNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nisw", cidNisw));
        }
        
        if (cidIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__ie", cidIe));
        }
        
        if (cidNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cid__nie", cidNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (installDateN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__n", installDateN));
        }
        
        if (installDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__lte", installDateLte));
        }
        
        if (installDateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__lt", installDateLt));
        }
        
        if (installDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__gte", installDateGte));
        }
        
        if (installDateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("install_date__gt", installDateGt));
        }
        
        if (terminationDateN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date__n", terminationDateN));
        }
        
        if (terminationDateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date__lte", terminationDateLte));
        }
        
        if (terminationDateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date__lt", terminationDateLt));
        }
        
        if (terminationDateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date__gte", terminationDateGte));
        }
        
        if (terminationDateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("termination_date__gt", terminationDateGt));
        }
        
        if (commitRateN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__n", commitRateN));
        }
        
        if (commitRateLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__lte", commitRateLte));
        }
        
        if (commitRateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__lt", commitRateLt));
        }
        
        if (commitRateGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__gte", commitRateGte));
        }
        
        if (commitRateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit_rate__gt", commitRateGt));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (tenantGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group_id__n", tenantGroupIdN));
        }
        
        if (tenantGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_group__n", tenantGroupN));
        }
        
        if (tenantIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id__n", tenantIdN));
        }
        
        if (tenantN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant__n", tenantN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (providerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id__n", providerIdN));
        }
        
        if (providerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__n", providerN));
        }
        
        if (providerNetworkIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_network_id__n", providerNetworkIdN));
        }
        
        if (typeIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type_id__n", typeIdN));
        }
        
        if (typeN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type__n", typeN));
        }
        
        if (statusN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status__n", statusN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsListValidateBeforeCall(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsCircuitsListCall(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param cid (optional)
     * @param description (optional)
     * @param installDate (optional)
     * @param terminationDate (optional)
     * @param commitRate (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param providerNetworkId (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param cidN (optional)
     * @param cidIc (optional)
     * @param cidNic (optional)
     * @param cidIew (optional)
     * @param cidNiew (optional)
     * @param cidIsw (optional)
     * @param cidNisw (optional)
     * @param cidIe (optional)
     * @param cidNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param installDateN (optional)
     * @param installDateLte (optional)
     * @param installDateLt (optional)
     * @param installDateGte (optional)
     * @param installDateGt (optional)
     * @param terminationDateN (optional)
     * @param terminationDateLte (optional)
     * @param terminationDateLt (optional)
     * @param terminationDateGte (optional)
     * @param terminationDateGt (optional)
     * @param commitRateN (optional)
     * @param commitRateLte (optional)
     * @param commitRateLt (optional)
     * @param commitRateGte (optional)
     * @param commitRateGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param providerNetworkIdN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return CircuitsCircuitsList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitsCircuitsList200Response circuitsCircuitsList(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsCircuitsList200Response> localVarResp = circuitsCircuitsListWithHttpInfo(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param cid (optional)
     * @param description (optional)
     * @param installDate (optional)
     * @param terminationDate (optional)
     * @param commitRate (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param providerNetworkId (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param cidN (optional)
     * @param cidIc (optional)
     * @param cidNic (optional)
     * @param cidIew (optional)
     * @param cidNiew (optional)
     * @param cidIsw (optional)
     * @param cidNisw (optional)
     * @param cidIe (optional)
     * @param cidNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param installDateN (optional)
     * @param installDateLte (optional)
     * @param installDateLt (optional)
     * @param installDateGte (optional)
     * @param installDateGt (optional)
     * @param terminationDateN (optional)
     * @param terminationDateLte (optional)
     * @param terminationDateLt (optional)
     * @param terminationDateGte (optional)
     * @param terminationDateGt (optional)
     * @param commitRateN (optional)
     * @param commitRateLte (optional)
     * @param commitRateLt (optional)
     * @param commitRateGte (optional)
     * @param commitRateGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param providerNetworkIdN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;CircuitsCircuitsList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitsCircuitsList200Response> circuitsCircuitsListWithHttpInfo(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsListValidateBeforeCall(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsCircuitsList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param cid (optional)
     * @param description (optional)
     * @param installDate (optional)
     * @param terminationDate (optional)
     * @param commitRate (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param tenantGroupId (optional)
     * @param tenantGroup (optional)
     * @param tenantId (optional)
     * @param tenant (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param providerNetworkId (optional)
     * @param typeId (optional)
     * @param type (optional)
     * @param status (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param cidN (optional)
     * @param cidIc (optional)
     * @param cidNic (optional)
     * @param cidIew (optional)
     * @param cidNiew (optional)
     * @param cidIsw (optional)
     * @param cidNisw (optional)
     * @param cidIe (optional)
     * @param cidNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param installDateN (optional)
     * @param installDateLte (optional)
     * @param installDateLt (optional)
     * @param installDateGte (optional)
     * @param installDateGt (optional)
     * @param terminationDateN (optional)
     * @param terminationDateLte (optional)
     * @param terminationDateLt (optional)
     * @param terminationDateGte (optional)
     * @param terminationDateGt (optional)
     * @param commitRateN (optional)
     * @param commitRateLte (optional)
     * @param commitRateLt (optional)
     * @param commitRateGte (optional)
     * @param commitRateGt (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param tenantGroupIdN (optional)
     * @param tenantGroupN (optional)
     * @param tenantIdN (optional)
     * @param tenantN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param providerNetworkIdN (optional)
     * @param typeIdN (optional)
     * @param typeN (optional)
     * @param statusN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsListAsync(String id, String cid, String description, String installDate, String terminationDate, String commitRate, String created, String lastUpdated, String q, String tag, String tenantGroupId, String tenantGroup, String tenantId, String tenant, String contact, String contactRole, String contactGroup, String providerId, String provider, String providerNetworkId, String typeId, String type, String status, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String idN, String idLte, String idLt, String idGte, String idGt, String cidN, String cidIc, String cidNic, String cidIew, String cidNiew, String cidIsw, String cidNisw, String cidIe, String cidNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String installDateN, String installDateLte, String installDateLt, String installDateGte, String installDateGt, String terminationDateN, String terminationDateLte, String terminationDateLt, String terminationDateGte, String terminationDateGt, String commitRateN, String commitRateLte, String commitRateLt, String commitRateGte, String commitRateGt, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String tenantGroupIdN, String tenantGroupN, String tenantIdN, String tenantN, String contactN, String contactRoleN, String contactGroupN, String providerIdN, String providerN, String providerNetworkIdN, String typeIdN, String typeN, String statusN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String ordering, Integer limit, Integer offset, final ApiCallback<CircuitsCircuitsList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsListValidateBeforeCall(id, cid, description, installDate, terminationDate, commitRate, created, lastUpdated, q, tag, tenantGroupId, tenantGroup, tenantId, tenant, contact, contactRole, contactGroup, providerId, provider, providerNetworkId, typeId, type, status, regionId, region, siteGroupId, siteGroup, siteId, site, idN, idLte, idLt, idGte, idGt, cidN, cidIc, cidNic, cidIew, cidNiew, cidIsw, cidNisw, cidIe, cidNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, installDateN, installDateLte, installDateLt, installDateGte, installDateGt, terminationDateN, terminationDateLte, terminationDateLt, terminationDateGte, terminationDateGt, commitRateN, commitRateLte, commitRateLt, commitRateGte, commitRateGt, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, tenantGroupIdN, tenantGroupN, tenantIdN, tenantN, contactN, contactRoleN, contactGroupN, providerIdN, providerN, providerNetworkIdN, typeIdN, typeN, statusN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsCircuitsList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsPartialUpdate
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsPartialUpdateCall(Integer id, WritableCircuit data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsPartialUpdateValidateBeforeCall(Integer id, WritableCircuit data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitsPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsPartialUpdate(Integer id, WritableCircuit data) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsPartialUpdateWithHttpInfo(Integer id, WritableCircuit data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsPartialUpdateAsync(Integer id, WritableCircuit data, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsRead
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsRead(Integer id) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsReadAsync(Integer id, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsCircuitsUpdate
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsUpdateCall(Integer id, WritableCircuit data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/circuits/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsCircuitsUpdateValidateBeforeCall(Integer id, WritableCircuit data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsCircuitsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsCircuitsUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsCircuitsUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     *
     * @return Circuit
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Circuit circuitsCircuitsUpdate(Integer id, WritableCircuit data) throws ApiException {
        ApiResponse<Circuit> localVarResp = circuitsCircuitsUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Circuit&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Circuit> circuitsCircuitsUpdateWithHttpInfo(Integer id, WritableCircuit data) throws ApiException {
        okhttp3.Call localVarCall = circuitsCircuitsUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this circuit. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsCircuitsUpdateAsync(Integer id, WritableCircuit data, final ApiCallback<Circuit> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsCircuitsUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Circuit>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsProviderNetworksBulkDelete() throws ApiException {
        circuitsProviderNetworksBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsProviderNetworksBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkPartialUpdateCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksBulkPartialUpdateValidateBeforeCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProviderNetworksBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksBulkPartialUpdate(WritableProviderNetwork data) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksBulkPartialUpdateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkPartialUpdateAsync(WritableProviderNetwork data, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkUpdateCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksBulkUpdateValidateBeforeCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProviderNetworksBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksBulkUpdate(WritableProviderNetwork data) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksBulkUpdateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksBulkUpdateAsync(WritableProviderNetwork data, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksCreateCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksCreateValidateBeforeCall(WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProviderNetworksCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksCreate(WritableProviderNetwork data) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksCreateWithHttpInfo(WritableProviderNetwork data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksCreateAsync(WritableProviderNetwork data, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksDelete
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProviderNetworksDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsProviderNetworksDelete(Integer id) throws ApiException {
        circuitsProviderNetworksDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsProviderNetworksDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksList
     *
     * @param id (optional)
     * @param name (optional)
     * @param serviceId (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param serviceIdN (optional)
     * @param serviceIdIc (optional)
     * @param serviceIdNic (optional)
     * @param serviceIdIew (optional)
     * @param serviceIdNiew (optional)
     * @param serviceIdIsw (optional)
     * @param serviceIdNisw (optional)
     * @param serviceIdIe (optional)
     * @param serviceIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksListCall(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id", serviceId));
        }
        
        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id", providerId));
        }
        
        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (serviceIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__n", serviceIdN));
        }
        
        if (serviceIdIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__ic", serviceIdIc));
        }
        
        if (serviceIdNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__nic", serviceIdNic));
        }
        
        if (serviceIdIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__iew", serviceIdIew));
        }
        
        if (serviceIdNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__niew", serviceIdNiew));
        }
        
        if (serviceIdIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__isw", serviceIdIsw));
        }
        
        if (serviceIdNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__nisw", serviceIdNisw));
        }
        
        if (serviceIdIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__ie", serviceIdIe));
        }
        
        if (serviceIdNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id__nie", serviceIdNie));
        }
        
        if (descriptionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__n", descriptionN));
        }
        
        if (descriptionIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ic", descriptionIc));
        }
        
        if (descriptionNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nic", descriptionNic));
        }
        
        if (descriptionIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__iew", descriptionIew));
        }
        
        if (descriptionNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__niew", descriptionNiew));
        }
        
        if (descriptionIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__isw", descriptionIsw));
        }
        
        if (descriptionNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nisw", descriptionNisw));
        }
        
        if (descriptionIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__ie", descriptionIe));
        }
        
        if (descriptionNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description__nie", descriptionNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (providerIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider_id__n", providerIdN));
        }
        
        if (providerN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__n", providerN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksListValidateBeforeCall(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksListCall(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param serviceId (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param serviceIdN (optional)
     * @param serviceIdIc (optional)
     * @param serviceIdNic (optional)
     * @param serviceIdIew (optional)
     * @param serviceIdNiew (optional)
     * @param serviceIdIsw (optional)
     * @param serviceIdNisw (optional)
     * @param serviceIdIe (optional)
     * @param serviceIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return CircuitsProviderNetworksList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitsProviderNetworksList200Response circuitsProviderNetworksList(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsProviderNetworksList200Response> localVarResp = circuitsProviderNetworksListWithHttpInfo(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param serviceId (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param serviceIdN (optional)
     * @param serviceIdIc (optional)
     * @param serviceIdNic (optional)
     * @param serviceIdIew (optional)
     * @param serviceIdNiew (optional)
     * @param serviceIdIsw (optional)
     * @param serviceIdNisw (optional)
     * @param serviceIdIe (optional)
     * @param serviceIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;CircuitsProviderNetworksList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitsProviderNetworksList200Response> circuitsProviderNetworksListWithHttpInfo(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksListValidateBeforeCall(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsProviderNetworksList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param serviceId (optional)
     * @param description (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param providerId (optional)
     * @param provider (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param serviceIdN (optional)
     * @param serviceIdIc (optional)
     * @param serviceIdNic (optional)
     * @param serviceIdIew (optional)
     * @param serviceIdNiew (optional)
     * @param serviceIdIsw (optional)
     * @param serviceIdNisw (optional)
     * @param serviceIdIe (optional)
     * @param serviceIdNie (optional)
     * @param descriptionN (optional)
     * @param descriptionIc (optional)
     * @param descriptionNic (optional)
     * @param descriptionIew (optional)
     * @param descriptionNiew (optional)
     * @param descriptionIsw (optional)
     * @param descriptionNisw (optional)
     * @param descriptionIe (optional)
     * @param descriptionNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param providerIdN (optional)
     * @param providerN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksListAsync(String id, String name, String serviceId, String description, String created, String lastUpdated, String q, String tag, String providerId, String provider, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String serviceIdN, String serviceIdIc, String serviceIdNic, String serviceIdIew, String serviceIdNiew, String serviceIdIsw, String serviceIdNisw, String serviceIdIe, String serviceIdNie, String descriptionN, String descriptionIc, String descriptionNic, String descriptionIew, String descriptionNiew, String descriptionIsw, String descriptionNisw, String descriptionIe, String descriptionNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String providerIdN, String providerN, String ordering, Integer limit, Integer offset, final ApiCallback<CircuitsProviderNetworksList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksListValidateBeforeCall(id, name, serviceId, description, created, lastUpdated, q, tag, providerId, provider, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, serviceIdN, serviceIdIc, serviceIdNic, serviceIdIew, serviceIdNiew, serviceIdIsw, serviceIdNisw, serviceIdIe, serviceIdNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, providerIdN, providerN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsProviderNetworksList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksPartialUpdate
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksPartialUpdateCall(Integer id, WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksPartialUpdateValidateBeforeCall(Integer id, WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProviderNetworksPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProviderNetworksPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksPartialUpdate(Integer id, WritableProviderNetwork data) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksPartialUpdateWithHttpInfo(Integer id, WritableProviderNetwork data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksPartialUpdateAsync(Integer id, WritableProviderNetwork data, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksRead
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProviderNetworksRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksRead(Integer id) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksReadAsync(Integer id, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProviderNetworksUpdate
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksUpdateCall(Integer id, WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/provider-networks/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProviderNetworksUpdateValidateBeforeCall(Integer id, WritableProviderNetwork data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProviderNetworksUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProviderNetworksUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProviderNetworksUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     *
     * @return ProviderNetwork
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ProviderNetwork circuitsProviderNetworksUpdate(Integer id, WritableProviderNetwork data) throws ApiException {
        ApiResponse<ProviderNetwork> localVarResp = circuitsProviderNetworksUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;ProviderNetwork&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ProviderNetwork> circuitsProviderNetworksUpdateWithHttpInfo(Integer id, WritableProviderNetwork data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProviderNetworksUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider network. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProviderNetworksUpdateAsync(Integer id, WritableProviderNetwork data, final ApiCallback<ProviderNetwork> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProviderNetworksUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<ProviderNetwork>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersBulkDelete
     *
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersBulkDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsProvidersBulkDeleteCall(_callback);
        return localVarCall;
        
    }
    
    /**
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsProvidersBulkDelete() throws ApiException {
        circuitsProvidersBulkDeleteWithHttpInfo();
    }
    
    /**
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsProvidersBulkDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersBulkDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersBulkDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersBulkPartialUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkPartialUpdateCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersBulkPartialUpdateValidateBeforeCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProvidersBulkPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersBulkPartialUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersBulkPartialUpdate(WritableProvider data) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersBulkPartialUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersBulkPartialUpdateWithHttpInfo(WritableProvider data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersBulkPartialUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkPartialUpdateAsync(WritableProvider data, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersBulkPartialUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersBulkUpdate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkUpdateCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersBulkUpdateValidateBeforeCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProvidersBulkUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersBulkUpdateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersBulkUpdate(WritableProvider data) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersBulkUpdateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersBulkUpdateWithHttpInfo(WritableProvider data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersBulkUpdateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersBulkUpdateAsync(WritableProvider data, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersBulkUpdateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersCreate
     *
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersCreateCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersCreateValidateBeforeCall(WritableProvider data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProvidersCreate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersCreateCall(data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param data (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersCreate(WritableProvider data) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersCreateWithHttpInfo(data);
        return localVarResp.getData();
    }
    
    /**
     * @param data (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersCreateWithHttpInfo(WritableProvider data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersCreateAsync(WritableProvider data, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersDelete
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersDelete(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersDeleteCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public void circuitsProvidersDelete(Integer id) throws ApiException {
        circuitsProvidersDeleteWithHttpInfo(id);
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     *
     * @return ApiResponse&lt;Void&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> circuitsProvidersDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersList
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param asn (optional)
     * @param account (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param asnId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param accountN (optional)
     * @param accountIc (optional)
     * @param accountNic (optional)
     * @param accountIew (optional)
     * @param accountNiew (optional)
     * @param accountIsw (optional)
     * @param accountNisw (optional)
     * @param accountIe (optional)
     * @param accountNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param asnIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersListCall(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/";
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }
        
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }
        
        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }
        
        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }
        
        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }
        
        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }
        
        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }
        
        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }
        
        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }
        
        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }
        
        if (contactRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role", contactRole));
        }
        
        if (contactGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group", contactGroup));
        }
        
        if (regionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id", regionId));
        }
        
        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }
        
        if (siteGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id", siteGroupId));
        }
        
        if (siteGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group", siteGroup));
        }
        
        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id", siteId));
        }
        
        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }
        
        if (asnId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id", asnId));
        }
        
        if (idN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__n", idN));
        }
        
        if (idLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lte", idLte));
        }
        
        if (idLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__lt", idLt));
        }
        
        if (idGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gte", idGte));
        }
        
        if (idGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id__gt", idGt));
        }
        
        if (nameN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__n", nameN));
        }
        
        if (nameIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ic", nameIc));
        }
        
        if (nameNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nic", nameNic));
        }
        
        if (nameIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iew", nameIew));
        }
        
        if (nameNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__niew", nameNiew));
        }
        
        if (nameIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__isw", nameIsw));
        }
        
        if (nameNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nisw", nameNisw));
        }
        
        if (nameIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__ie", nameIe));
        }
        
        if (nameNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__nie", nameNie));
        }
        
        if (slugN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__n", slugN));
        }
        
        if (slugIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ic", slugIc));
        }
        
        if (slugNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nic", slugNic));
        }
        
        if (slugIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__iew", slugIew));
        }
        
        if (slugNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__niew", slugNiew));
        }
        
        if (slugIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__isw", slugIsw));
        }
        
        if (slugNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nisw", slugNisw));
        }
        
        if (slugIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__ie", slugIe));
        }
        
        if (slugNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug__nie", slugNie));
        }
        
        if (asnN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__n", asnN));
        }
        
        if (asnLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lte", asnLte));
        }
        
        if (asnLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__lt", asnLt));
        }
        
        if (asnGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gte", asnGte));
        }
        
        if (asnGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn__gt", asnGt));
        }
        
        if (accountN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__n", accountN));
        }
        
        if (accountIc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__ic", accountIc));
        }
        
        if (accountNic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nic", accountNic));
        }
        
        if (accountIew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__iew", accountIew));
        }
        
        if (accountNiew != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__niew", accountNiew));
        }
        
        if (accountIsw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__isw", accountIsw));
        }
        
        if (accountNisw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nisw", accountNisw));
        }
        
        if (accountIe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__ie", accountIe));
        }
        
        if (accountNie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account__nie", accountNie));
        }
        
        if (createdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__n", createdN));
        }
        
        if (createdLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lte", createdLte));
        }
        
        if (createdLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__lt", createdLt));
        }
        
        if (createdGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gte", createdGte));
        }
        
        if (createdGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created__gt", createdGt));
        }
        
        if (lastUpdatedN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__n", lastUpdatedN));
        }
        
        if (lastUpdatedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lte", lastUpdatedLte));
        }
        
        if (lastUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__lt", lastUpdatedLt));
        }
        
        if (lastUpdatedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gte", lastUpdatedGte));
        }
        
        if (lastUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated__gt", lastUpdatedGt));
        }
        
        if (tagN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag__n", tagN));
        }
        
        if (contactN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact__n", contactN));
        }
        
        if (contactRoleN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_role__n", contactRoleN));
        }
        
        if (contactGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact_group__n", contactGroupN));
        }
        
        if (regionIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_id__n", regionIdN));
        }
        
        if (regionN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region__n", regionN));
        }
        
        if (siteGroupIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group_id__n", siteGroupIdN));
        }
        
        if (siteGroupN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_group__n", siteGroupN));
        }
        
        if (siteIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site_id__n", siteIdN));
        }
        
        if (siteN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site__n", siteN));
        }
        
        if (asnIdN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn_id__n", asnIdN));
        }
        
        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }
        
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }
        
        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersListValidateBeforeCall(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        
        okhttp3.Call localVarCall = circuitsProvidersListCall(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset, _callback);
        return localVarCall;
        
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param asn (optional)
     * @param account (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param asnId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param accountN (optional)
     * @param accountIc (optional)
     * @param accountNic (optional)
     * @param accountIew (optional)
     * @param accountNiew (optional)
     * @param accountIsw (optional)
     * @param accountNisw (optional)
     * @param accountIe (optional)
     * @param accountNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param asnIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return CircuitsProvidersList200Response
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public CircuitsProvidersList200Response circuitsProvidersList(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CircuitsProvidersList200Response> localVarResp = circuitsProvidersListWithHttpInfo(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset);
        return localVarResp.getData();
    }
    
    /**
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param asn (optional)
     * @param account (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param asnId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param accountN (optional)
     * @param accountIc (optional)
     * @param accountNic (optional)
     * @param accountIew (optional)
     * @param accountNiew (optional)
     * @param accountIsw (optional)
     * @param accountNisw (optional)
     * @param accountIe (optional)
     * @param accountNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param asnIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     *
     * @return ApiResponse&lt;CircuitsProvidersList200Response&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CircuitsProvidersList200Response> circuitsProvidersListWithHttpInfo(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersListValidateBeforeCall(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset, null);
        Type localVarReturnType = new TypeToken<CircuitsProvidersList200Response>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @param id (optional)
     * @param name (optional)
     * @param slug (optional)
     * @param asn (optional)
     * @param account (optional)
     * @param created (optional)
     * @param lastUpdated (optional)
     * @param q (optional)
     * @param tag (optional)
     * @param contact (optional)
     * @param contactRole (optional)
     * @param contactGroup (optional)
     * @param regionId (optional)
     * @param region (optional)
     * @param siteGroupId (optional)
     * @param siteGroup (optional)
     * @param siteId (optional)
     * @param site (optional)
     * @param asnId (optional)
     * @param idN (optional)
     * @param idLte (optional)
     * @param idLt (optional)
     * @param idGte (optional)
     * @param idGt (optional)
     * @param nameN (optional)
     * @param nameIc (optional)
     * @param nameNic (optional)
     * @param nameIew (optional)
     * @param nameNiew (optional)
     * @param nameIsw (optional)
     * @param nameNisw (optional)
     * @param nameIe (optional)
     * @param nameNie (optional)
     * @param slugN (optional)
     * @param slugIc (optional)
     * @param slugNic (optional)
     * @param slugIew (optional)
     * @param slugNiew (optional)
     * @param slugIsw (optional)
     * @param slugNisw (optional)
     * @param slugIe (optional)
     * @param slugNie (optional)
     * @param asnN (optional)
     * @param asnLte (optional)
     * @param asnLt (optional)
     * @param asnGte (optional)
     * @param asnGt (optional)
     * @param accountN (optional)
     * @param accountIc (optional)
     * @param accountNic (optional)
     * @param accountIew (optional)
     * @param accountNiew (optional)
     * @param accountIsw (optional)
     * @param accountNisw (optional)
     * @param accountIe (optional)
     * @param accountNie (optional)
     * @param createdN (optional)
     * @param createdLte (optional)
     * @param createdLt (optional)
     * @param createdGte (optional)
     * @param createdGt (optional)
     * @param lastUpdatedN (optional)
     * @param lastUpdatedLte (optional)
     * @param lastUpdatedLt (optional)
     * @param lastUpdatedGte (optional)
     * @param lastUpdatedGt (optional)
     * @param tagN (optional)
     * @param contactN (optional)
     * @param contactRoleN (optional)
     * @param contactGroupN (optional)
     * @param regionIdN (optional)
     * @param regionN (optional)
     * @param siteGroupIdN (optional)
     * @param siteGroupN (optional)
     * @param siteIdN (optional)
     * @param siteN (optional)
     * @param asnIdN (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersListAsync(String id, String name, String slug, String asn, String account, String created, String lastUpdated, String q, String tag, String contact, String contactRole, String contactGroup, String regionId, String region, String siteGroupId, String siteGroup, String siteId, String site, String asnId, String idN, String idLte, String idLt, String idGte, String idGt, String nameN, String nameIc, String nameNic, String nameIew, String nameNiew, String nameIsw, String nameNisw, String nameIe, String nameNie, String slugN, String slugIc, String slugNic, String slugIew, String slugNiew, String slugIsw, String slugNisw, String slugIe, String slugNie, String asnN, String asnLte, String asnLt, String asnGte, String asnGt, String accountN, String accountIc, String accountNic, String accountIew, String accountNiew, String accountIsw, String accountNisw, String accountIe, String accountNie, String createdN, String createdLte, String createdLt, String createdGte, String createdGt, String lastUpdatedN, String lastUpdatedLte, String lastUpdatedLt, String lastUpdatedGte, String lastUpdatedGt, String tagN, String contactN, String contactRoleN, String contactGroupN, String regionIdN, String regionN, String siteGroupIdN, String siteGroupN, String siteIdN, String siteN, String asnIdN, String ordering, Integer limit, Integer offset, final ApiCallback<CircuitsProvidersList200Response> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersListValidateBeforeCall(id, name, slug, asn, account, created, lastUpdated, q, tag, contact, contactRole, contactGroup, regionId, region, siteGroupId, siteGroup, siteId, site, asnId, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, asnN, asnLte, asnLt, asnGte, asnGt, accountN, accountIc, accountNic, accountIew, accountNiew, accountIsw, accountNisw, accountIe, accountNie, createdN, createdLte, createdLt, createdGte, createdGt, lastUpdatedN, lastUpdatedLte, lastUpdatedLt, lastUpdatedGte, lastUpdatedGt, tagN, contactN, contactRoleN, contactGroupN, regionIdN, regionN, siteGroupIdN, siteGroupN, siteIdN, siteN, asnIdN, ordering, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CircuitsProvidersList200Response>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersPartialUpdate
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersPartialUpdateCall(Integer id, WritableProvider data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersPartialUpdateValidateBeforeCall(Integer id, WritableProvider data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProvidersPartialUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersPartialUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersPartialUpdate(Integer id, WritableProvider data) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersPartialUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersPartialUpdateWithHttpInfo(Integer id, WritableProvider data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersPartialUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersPartialUpdateAsync(Integer id, WritableProvider data, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersPartialUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersRead
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersReadCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersReadValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersRead(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersReadCall(id, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersRead(Integer id) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersReadWithHttpInfo(id);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersReadWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersReadAsync(Integer id, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    
    /**
     * Build call for circuitsProvidersUpdate
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     * @param _callback Callback for upload/download progress
     *
     * @return Call to execute
     *
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersUpdateCall(Integer id, WritableProvider data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};
        
        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }
        
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/circuits/providers/{id}/".replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));
        
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        
        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }
        
        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        
        String[] localVarAuthNames = new String[] {"Bearer"};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call circuitsProvidersUpdateValidateBeforeCall(Integer id, WritableProvider data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling circuitsProvidersUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling circuitsProvidersUpdate(Async)");
        }
        
        
        okhttp3.Call localVarCall = circuitsProvidersUpdateCall(id, data, _callback);
        return localVarCall;
        
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     *
     * @return Provider
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public Provider circuitsProvidersUpdate(Integer id, WritableProvider data) throws ApiException {
        ApiResponse<Provider> localVarResp = circuitsProvidersUpdateWithHttpInfo(id, data);
        return localVarResp.getData();
    }
    
    /**
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     *
     * @return ApiResponse&lt;Provider&gt;
     *
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Provider> circuitsProvidersUpdateWithHttpInfo(Integer id, WritableProvider data) throws ApiException {
        okhttp3.Call localVarCall = circuitsProvidersUpdateValidateBeforeCall(id, data, null);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
    
    /**
     * (asynchronously)
     *
     * @param id A unique integer value identifying this provider. (required)
     * @param data (required)
     * @param _callback The callback to be executed when the API call finishes
     *
     * @return The request call
     *
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call circuitsProvidersUpdateAsync(Integer id, WritableProvider data, final ApiCallback<Provider> _callback) throws ApiException {
        
        okhttp3.Call localVarCall = circuitsProvidersUpdateValidateBeforeCall(id, data, _callback);
        Type localVarReturnType = new TypeToken<Provider>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
