/*
 * NetBox API
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.codemakers.netbox.client.api;

import de.codemakers.netbox.client.ApiException;
import de.codemakers.netbox.client.model.WirelessLAN;
import de.codemakers.netbox.client.model.WirelessLANGroup;
import de.codemakers.netbox.client.model.WirelessLink;
import de.codemakers.netbox.client.model.WirelessWirelessLanGroupsList200Response;
import de.codemakers.netbox.client.model.WirelessWirelessLansList200Response;
import de.codemakers.netbox.client.model.WirelessWirelessLinksList200Response;
import de.codemakers.netbox.client.model.WritableWirelessLAN;
import de.codemakers.netbox.client.model.WritableWirelessLANGroup;
import de.codemakers.netbox.client.model.WritableWirelessLink;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for WirelessApi
 */
@Ignore
public class WirelessApiTest {

    private final WirelessApi api = new WirelessApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkDeleteTest() throws ApiException {
        
        api.wirelessWirelessLanGroupsBulkDelete();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLANGroup data = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsBulkPartialUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsBulkUpdateTest() throws ApiException {
        WritableWirelessLANGroup data = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsBulkUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsCreateTest() throws ApiException {
        WritableWirelessLANGroup data = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsCreate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsDeleteTest() throws ApiException {
        Integer id = null;
        
        api.wirelessWirelessLanGroupsDelete(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsListTest() throws ApiException {
        String id = null;
        String name = null;
        String slug = null;
        String description = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String tag = null;
        String parentId = null;
        String parent = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String nameN = null;
        String nameIc = null;
        String nameNic = null;
        String nameIew = null;
        String nameNiew = null;
        String nameIsw = null;
        String nameNisw = null;
        String nameIe = null;
        String nameNie = null;
        String slugN = null;
        String slugIc = null;
        String slugNic = null;
        String slugIew = null;
        String slugNiew = null;
        String slugIsw = null;
        String slugNisw = null;
        String slugIe = null;
        String slugNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String tagN = null;
        String parentIdN = null;
        String parentN = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLanGroupsList200Response response = 
        api.wirelessWirelessLanGroupsList(id, name, slug, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, parentId, parent, idN, idLte, idLt, idGte, idGt, nameN, nameIc, nameNic, nameIew, nameNiew, nameIsw, nameNisw, nameIe, nameNie, slugN, slugIc, slugNic, slugIew, slugNiew, slugIsw, slugNisw, slugIe, slugNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, parentIdN, parentN, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLANGroup data = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsPartialUpdate(id, data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsReadTest() throws ApiException {
        Integer id = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsRead(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLanGroupsUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLANGroup data = null;
        WirelessLANGroup response = 
        api.wirelessWirelessLanGroupsUpdate(id, data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkDeleteTest() throws ApiException {
        
        api.wirelessWirelessLansBulkDelete();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLAN data = null;
        WirelessLAN response = 
        api.wirelessWirelessLansBulkPartialUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansBulkUpdateTest() throws ApiException {
        WritableWirelessLAN data = null;
        WirelessLAN response = 
        api.wirelessWirelessLansBulkUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansCreateTest() throws ApiException {
        WritableWirelessLAN data = null;
        WirelessLAN response = 
        api.wirelessWirelessLansCreate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansDeleteTest() throws ApiException {
        Integer id = null;
        
        api.wirelessWirelessLansDelete(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansListTest() throws ApiException {
        String id = null;
        String ssid = null;
        String authPsk = null;
        String description = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String tag = null;
        String groupId = null;
        String group = null;
        String vlanId = null;
        String authType = null;
        String authCipher = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String ssidN = null;
        String ssidIc = null;
        String ssidNic = null;
        String ssidIew = null;
        String ssidNiew = null;
        String ssidIsw = null;
        String ssidNisw = null;
        String ssidIe = null;
        String ssidNie = null;
        String authPskN = null;
        String authPskIc = null;
        String authPskNic = null;
        String authPskIew = null;
        String authPskNiew = null;
        String authPskIsw = null;
        String authPskNisw = null;
        String authPskIe = null;
        String authPskNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String tagN = null;
        String groupIdN = null;
        String groupN = null;
        String vlanIdN = null;
        String authTypeN = null;
        String authCipherN = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLansList200Response response = 
        api.wirelessWirelessLansList(id, ssid, authPsk, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, groupId, group, vlanId, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, groupIdN, groupN, vlanIdN, authTypeN, authCipherN, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLAN data = null;
        WirelessLAN response = 
        api.wirelessWirelessLansPartialUpdate(id, data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansReadTest() throws ApiException {
        Integer id = null;
        WirelessLAN response = 
        api.wirelessWirelessLansRead(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLansUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLAN data = null;
        WirelessLAN response = 
        api.wirelessWirelessLansUpdate(id, data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkDeleteTest() throws ApiException {
        
        api.wirelessWirelessLinksBulkDelete();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkPartialUpdateTest() throws ApiException {
        WritableWirelessLink data = null;
        WirelessLink response = 
        api.wirelessWirelessLinksBulkPartialUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksBulkUpdateTest() throws ApiException {
        WritableWirelessLink data = null;
        WirelessLink response = 
        api.wirelessWirelessLinksBulkUpdate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksCreateTest() throws ApiException {
        WritableWirelessLink data = null;
        WirelessLink response = 
        api.wirelessWirelessLinksCreate(data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksDeleteTest() throws ApiException {
        Integer id = null;
        
        api.wirelessWirelessLinksDelete(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Overrides ListModelMixin to allow processing ExportTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksListTest() throws ApiException {
        String id = null;
        String ssid = null;
        String authPsk = null;
        String description = null;
        String created = null;
        String createdGte = null;
        String createdLte = null;
        String lastUpdated = null;
        String lastUpdatedGte = null;
        String lastUpdatedLte = null;
        String q = null;
        String tag = null;
        String interfaceAId = null;
        String interfaceBId = null;
        String status = null;
        String authType = null;
        String authCipher = null;
        String idN = null;
        String idLte = null;
        String idLt = null;
        String idGte = null;
        String idGt = null;
        String ssidN = null;
        String ssidIc = null;
        String ssidNic = null;
        String ssidIew = null;
        String ssidNiew = null;
        String ssidIsw = null;
        String ssidNisw = null;
        String ssidIe = null;
        String ssidNie = null;
        String authPskN = null;
        String authPskIc = null;
        String authPskNic = null;
        String authPskIew = null;
        String authPskNiew = null;
        String authPskIsw = null;
        String authPskNisw = null;
        String authPskIe = null;
        String authPskNie = null;
        String descriptionN = null;
        String descriptionIc = null;
        String descriptionNic = null;
        String descriptionIew = null;
        String descriptionNiew = null;
        String descriptionIsw = null;
        String descriptionNisw = null;
        String descriptionIe = null;
        String descriptionNie = null;
        String tagN = null;
        String interfaceAIdN = null;
        String interfaceAIdLte = null;
        String interfaceAIdLt = null;
        String interfaceAIdGte = null;
        String interfaceAIdGt = null;
        String interfaceBIdN = null;
        String interfaceBIdLte = null;
        String interfaceBIdLt = null;
        String interfaceBIdGte = null;
        String interfaceBIdGt = null;
        String statusN = null;
        String authTypeN = null;
        String authCipherN = null;
        Integer limit = null;
        Integer offset = null;
        WirelessWirelessLinksList200Response response = 
        api.wirelessWirelessLinksList(id, ssid, authPsk, description, created, createdGte, createdLte, lastUpdated, lastUpdatedGte, lastUpdatedLte, q, tag, interfaceAId, interfaceBId, status, authType, authCipher, idN, idLte, idLt, idGte, idGt, ssidN, ssidIc, ssidNic, ssidIew, ssidNiew, ssidIsw, ssidNisw, ssidIe, ssidNie, authPskN, authPskIc, authPskNic, authPskIew, authPskNiew, authPskIsw, authPskNisw, authPskIe, authPskNie, descriptionN, descriptionIc, descriptionNic, descriptionIew, descriptionNiew, descriptionIsw, descriptionNisw, descriptionIe, descriptionNie, tagN, interfaceAIdN, interfaceAIdLte, interfaceAIdLt, interfaceAIdGte, interfaceAIdGt, interfaceBIdN, interfaceBIdLte, interfaceBIdLt, interfaceBIdGte, interfaceBIdGt, statusN, authTypeN, authCipherN, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksPartialUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLink data = null;
        WirelessLink response = 
        api.wirelessWirelessLinksPartialUpdate(id, data);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksReadTest() throws ApiException {
        Integer id = null;
        WirelessLink response = 
        api.wirelessWirelessLinksRead(id);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessWirelessLinksUpdateTest() throws ApiException {
        Integer id = null;
        WritableWirelessLink data = null;
        WirelessLink response = 
        api.wirelessWirelessLinksUpdate(id, data);
        
        // TODO: test validations
    }
    
}
